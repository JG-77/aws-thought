{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/ThoughtList/index.js","components/ThoughtForm/index.js","pages/Home.js","pages/NoMatch.js","pages/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","style","fontWeight","Footer","ThoughtList","thoughts","title","length","map","thought","key","createdAt","username","Date","parseInt","toString","image","src","alt","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","fileInput","useRef","handleChange","event","target","value","name","onSubmit","preventDefault","a","fetch","method","headers","Accept","body","JSON","stringify","res","json","data","console","log","postData","placeholder","onChange","type","ref","onClick","FormData","append","current","files","mode","ok","Error","statusText","postResponse","Location","postImage","Home","isLoaded","setIsLoaded","setThoughts","useEffect","jsonData","sort","b","fetchData","NoMatch","Profile","props","userParam","useParams","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ece018cc.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link\n          to={`/`}\n          style={{ fontWeight: 700 }}\n          className=\"text-light\"\n        >\n          <h1>Deep Thoughts</h1>\n        </Link>{' '}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">&copy;2020 by Lernantino</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Renders the list of thoughts\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map((thought) => (\n          <div key={thought.createdAt} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link\n                to={`/profile/${thought.username}`}\n                style={{ fontWeight: 700 }}\n                className=\"text-light\"\n              >\n                {thought.username}'s thought on{' '}\n                {new Date(parseInt(thought.createdAt)).toString()}\n              </Link>{' '}\n            </p>\n            {thought.thought && <p className=\"px-2 mt-2\">{thought.thought}</p>}\n\n            {/* add the thought image */}\n            {thought.image && (\n              <p className=\"px-2\">\n                {/* added the <img> element underneath the thought text */}\n                <img\n                  className=\"mt-3 ml-4 thought-image\"\n                  src={thought.image}\n                  alt=\"S3 bucket response\"\n                />\n              </p>\n            )}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;\n","//import React, { useRef } from 'react';\nimport React, { useState, useRef } from 'react';\n//useRef Hook to retrieve the image file uploaded by the user, by accessing the <input type=\"file\"> element\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    thought: '',\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  // set the initial value of fileInput—the reference to the DOM element, <input type=\"file\">—to null. This ensures that the reference to the DOM element is current\n  const fileInput = useRef(null);\n\n  const handleImageUpload = (event) => {\n    event.preventDefault();\n    //declare an interface object from FormData, called data\n    const data = new FormData();\n    //FormData makes it easy to construct a set of key-value pairs, mirroring the format of a form with the type set to \"multipart/form-data\"\n    //assign a key-value pair to the FormData object with the name of the image file (image) and the payload (the image file)\n    //assign the reference to the image file with fileInput.current.files[0]\n    data.append('image', fileInput.current.files[0]);\n\n    // send image file to endpoint with the postImage function\n    const postImage = async () => {\n      try {\n        const res = await fetch('/api/image-upload', {\n          mode: 'cors',\n          method: 'POST',\n          //used a POST method to send the image file as data in the body of the fetch request\n          body: data,\n        });\n        if (!res.ok) throw new Error(res.statusText);\n        //convert the response into a JSON object, so that we can add this new key-value to formState\n        const postResponse = await res.json();\n        //new key-value pair is { image: postResponse.Location }, which is the public URL of the image\n        setFormState({ ...formState, image: postResponse.Location });\n        console.log('postImage: ', postResponse.Location);\n\n        return postResponse.Location;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    postImage();\n  };\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setFormState({ ...formState, [event.target.name]: event.target.value });\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // submit form\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const postData = async () => {\n      //fetch function to send the form data to the endpoint in the body of the request\n      const res = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formState),\n      });\n      const data = await res.json();\n      console.log(data);\n    };\n    postData();\n\n    // clear form value\n    setFormState({ username: '', thought: '' });\n    setCharacterCount(0);\n  };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 ? 'text-error' : ''}`}>\n        Character Count: {characterCount}/280\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <input\n          placeholder=\"Name\"\n          name=\"username\"\n          value={formState.username}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></input>\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          name=\"thought\"\n          value={formState.thought}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></textarea>\n\n        <label className=\"form-input col-12  p-1\">\n          Add an image to your thought:\n          {/* <input> type is file --> With this designation, HTML can browse and add files from your computer */}\n          {/* ref attribute is assigned to the fileInput. We'll define this function using a React Hook name, useRef */}\n          <input type=\"file\" ref={fileInput} className=\"form-input p-2\" />\n          {/* handleImageUpload function will send the image to the image upload endpoint we created */}\n          <button className=\"btn\" onClick={handleImageUpload} type=\"submit\">\n            Upload\n          </button>\n        </label>\n\n        <button className=\"btn col-12 \" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import React, { useState, useEffect } from 'react';\nimport ThoughtList from '../components/ThoughtList';\nimport ThoughtForm from '../components/ThoughtForm';\n\nconst Home = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thoughts, setThoughts] = useState([]);\n\n  //useEffect hook to request all the users' thoughts to render on the component mount event\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //GET method to fetch the data from the database\n        const res = await fetch('/api/users');\n        //store as a JSON into the data constant\n        const jsonData = await res.json();\n        // sort the array by createdAt property ordered by descending values\n        const data = jsonData.sort((a, b) =>\n          a.createdAt < b.createdAt ? 1 : -1\n        );\n        // store the data using the useState setter method, setThoughts\n        setThoughts([...data]);\n        setIsLoaded(true);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <main>\n      <div className=\"flex-row justify-space-between\">\n        <div className=\"col-12 mb-3\">\n          <ThoughtForm />\n        </div>\n        <div className={`col-12 mb-3 `}>\n          {!isLoaded ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              setThoughts={setThoughts}\n              title=\"Some Feed for Thought(s)...\"\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ThoughtList from '../components/ThoughtList';\n\nconst Profile = (props) => {\n  const { username: userParam } = useParams();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thoughts, setThoughts] = useState([\n    {\n      username: userParam,\n      createdAt: '',\n      thought: '',\n    },\n  ]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //userParam sourced from the React Router to retain the username from the ThoughtList component\n        const res = await fetch(`/api/users/${userParam}`);\n        const data = await res.json();\n        console.log(data);\n        //Set the state with the database response\n        setThoughts([...data]);\n        setIsLoaded(true);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    //Set the dependency array in the hook to reflect the dependency for the username with userParam\n    fetchData();\n  }, [userParam]);\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n          Viewing {userParam ? `${userParam}'s` : 'your'} profile.\n        </h2>\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-9\">\n          {!isLoaded ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              title={`${userParam}'s thoughts...`}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport NoMatch from './pages/NoMatch';\nimport Profile from './pages/Profile';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"flex-column justify-flex-start min-100-vh\">\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/profile/:username\" component={Profile} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}